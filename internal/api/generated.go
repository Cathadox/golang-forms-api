// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Authentication defines model for Authentication.
type Authentication struct {
	// Password The password for authentication
	Password string `json:"password"`

	// Username The username for authentication
	Username string `json:"username"`
}

// AuthenticationResponse defines model for AuthenticationResponse.
type AuthenticationResponse struct {
	// Token The JWT token for authentication
	Token string `json:"token"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code The error code
	Code int `json:"code"`

	// Message A descriptive error message
	Message string `json:"message"`
}

// FormCreate defines model for FormCreate.
type FormCreate struct {
	// ClickTrackingEnabled Indicates if click tracking is enabled
	ClickTrackingEnabled *bool `json:"clickTrackingEnabled,omitempty"`

	// Name The name of the form
	Name string `json:"name" validate:"required,min=1,max=100"`

	// OpenTrackingEnabled Indicates if open tracking is enabled
	OpenTrackingEnabled *bool `json:"openTrackingEnabled,omitempty"`

	// Steps An array of form steps
	Steps FormStepCreateArray `json:"steps" validate:"required,min=1,max=100"`
}

// FormResponseGet defines model for FormResponseGet.
type FormResponseGet struct {
	// ClickTrackingEnabled Indicates if click tracking is enabled
	ClickTrackingEnabled bool `json:"clickTrackingEnabled"`

	// Name The name of the form
	Name string `json:"name"`

	// OpenTrackingEnabled Indicates if open tracking is enabled
	OpenTrackingEnabled bool `json:"openTrackingEnabled"`

	// Self An object containing the ID and href of a resource
	Self SelfId `json:"self"`

	// Steps An array of form steps
	Steps FormStepGetArray `json:"steps"`
}

// FormStepCreate defines model for FormStepCreate.
type FormStepCreate struct {
	// Content The content of the step
	Content string `json:"content" validate:"required,min=1,max=256"`

	// Name The name of the step
	Name string `json:"name" validate:"required,min=1,max=100"`

	// Step The order of the step in the form
	Step int `json:"step"`
}

// FormStepCreateArray An array of form steps
type FormStepCreateArray = []FormStepCreate

// FormStepGetArray An array of form steps
type FormStepGetArray = []FormStepResponseGet

// FormStepResponseGet defines model for FormStepResponseGet.
type FormStepResponseGet struct {
	// Content The content of the form step
	Content string `json:"content"`

	// Name The name of the form step
	Name string `json:"name"`

	// Self An object containing the ID and href of a resource
	Self SelfId `json:"self"`

	// Step The order of the step in the form
	Step int `json:"step"`
}

// FormStepUpdate defines model for FormStepUpdate.
type FormStepUpdate struct {
	// Content The content of the step
	Content *string `json:"content,omitempty" validate:"omitempty,min=1,max=256"`

	// Name The name of the step
	Name *string `json:"name,omitempty" validate:"omitempty,min=1,max=100"`
}

// FormUpdate defines model for FormUpdate.
type FormUpdate struct {
	// ClickTrackingEnabled Indicates if click tracking is enabled
	ClickTrackingEnabled *bool `json:"clickTrackingEnabled,omitempty"`

	// OpenTrackingEnabled Indicates if open tracking is enabled
	OpenTrackingEnabled *bool `json:"openTrackingEnabled,omitempty"`
}

// SelfId An object containing the ID and href of a resource
type SelfId struct {
	// Href The URL of the location
	Href string `json:"href"`

	// Id The ID of the location
	Id string `json:"id"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field The field that caused the validation error
	Field string `json:"field"`

	// Message The validation error message for the field
	Message string `json:"message"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Code The error code
	Code int `json:"code"`

	// Errors A list of validation errors
	Errors ValidationErrors `json:"errors"`

	// Message A descriptive error message
	Message string `json:"message"`
}

// ValidationErrors A list of validation errors
type ValidationErrors = []ValidationError

// CreateFormJSONRequestBody defines body for CreateForm for application/json ContentType.
type CreateFormJSONRequestBody = FormCreate

// UpdateFormByIdJSONRequestBody defines body for UpdateFormById for application/json ContentType.
type UpdateFormByIdJSONRequestBody = FormUpdate

// UpdateFormStepByIdJSONRequestBody defines body for UpdateFormStepById for application/json ContentType.
type UpdateFormStepByIdJSONRequestBody = FormStepUpdate

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = Authentication

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new form
	// (POST /form)
	CreateForm(c *gin.Context)
	// Get a specific form
	// (GET /form/{formId})
	GetFormById(c *gin.Context, formId string)
	// Update an existing form
	// (PATCH /form/{formId})
	UpdateFormById(c *gin.Context, formId string)
	// Delete a form step
	// (DELETE /form/{formId}/steps/{stepId})
	DeleteFormStepById(c *gin.Context, formId string, stepId string)
	// Get a specific form step
	// (GET /form/{formId}/steps/{stepId})
	GetFormStepById(c *gin.Context, formId string, stepId string)
	// Update an existing form step
	// (PATCH /form/{formId}/steps/{stepId})
	UpdateFormStepById(c *gin.Context, formId string, stepId string)
	// User login
	// (POST /login)
	LoginUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateForm operation middleware
func (siw *ServerInterfaceWrapper) CreateForm(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateForm(c)
}

// GetFormById operation middleware
func (siw *ServerInterfaceWrapper) GetFormById(c *gin.Context) {

	var err error

	// ------------- Path parameter "formId" -------------
	var formId string

	err = runtime.BindStyledParameterWithOptions("simple", "formId", c.Param("formId"), &formId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormById(c, formId)
}

// UpdateFormById operation middleware
func (siw *ServerInterfaceWrapper) UpdateFormById(c *gin.Context) {

	var err error

	// ------------- Path parameter "formId" -------------
	var formId string

	err = runtime.BindStyledParameterWithOptions("simple", "formId", c.Param("formId"), &formId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFormById(c, formId)
}

// DeleteFormStepById operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormStepById(c *gin.Context) {

	var err error

	// ------------- Path parameter "formId" -------------
	var formId string

	err = runtime.BindStyledParameterWithOptions("simple", "formId", c.Param("formId"), &formId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "stepId" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "stepId", c.Param("stepId"), &stepId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stepId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFormStepById(c, formId, stepId)
}

// GetFormStepById operation middleware
func (siw *ServerInterfaceWrapper) GetFormStepById(c *gin.Context) {

	var err error

	// ------------- Path parameter "formId" -------------
	var formId string

	err = runtime.BindStyledParameterWithOptions("simple", "formId", c.Param("formId"), &formId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "stepId" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "stepId", c.Param("stepId"), &stepId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stepId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormStepById(c, formId, stepId)
}

// UpdateFormStepById operation middleware
func (siw *ServerInterfaceWrapper) UpdateFormStepById(c *gin.Context) {

	var err error

	// ------------- Path parameter "formId" -------------
	var formId string

	err = runtime.BindStyledParameterWithOptions("simple", "formId", c.Param("formId"), &formId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "stepId" -------------
	var stepId string

	err = runtime.BindStyledParameterWithOptions("simple", "stepId", c.Param("stepId"), &stepId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stepId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFormStepById(c, formId, stepId)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/form", wrapper.CreateForm)
	router.GET(options.BaseURL+"/form/:formId", wrapper.GetFormById)
	router.PATCH(options.BaseURL+"/form/:formId", wrapper.UpdateFormById)
	router.DELETE(options.BaseURL+"/form/:formId/steps/:stepId", wrapper.DeleteFormStepById)
	router.GET(options.BaseURL+"/form/:formId/steps/:stepId", wrapper.GetFormStepById)
	router.PATCH(options.BaseURL+"/form/:formId/steps/:stepId", wrapper.UpdateFormStepById)
	router.POST(options.BaseURL+"/login", wrapper.LoginUser)
}
